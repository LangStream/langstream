# Copyright DataStax, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  tests:
    name: Unit tests (${{ matrix.name }})
    runs-on: LangStream-4-cores
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Runtime
          - name: Runtime IT
          - name: Deployer
          - name: Api Gateway
          - name: Control plane
          - name: Other
          - name: Style
    steps:
      - name: 'Setup: checkout project'
        uses: actions/checkout@v2
      - name: 'Setup: Java 17'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.x'
      - name: 'Setup: Python 3.11'
        uses: actions/setup-python@v4
        if: ${{ matrix.name == 'Runtime' }}
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: 'Init: cache local Maven repository'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 'Init: install python tools'
        if: ${{ matrix.name == 'Runtime' }}
        run: pip install -r requirements.txt

      - name: 'Init: build project'
        run: |
          chmod +x mvnw
          ./mvnw -ntp clean install -DskipTests -PskipPython

      - name: 'Test: Runtime'
        if: ${{ matrix.name == 'Runtime' }}
        run: |
          ./mvnw -ntp package -pl ":langstream-runtime-impl"
          if [[ `git status --porcelain` ]]; then
            echo "Found runtime impl changed after building, please build the runtime impl and commit the changes. "
            git status
            git diff
            exit 1
          fi

      - name: 'Test: Runtime (Integration Tests)'
        if: ${{ matrix.name == 'Runtime IT' }}
        run: |
          ./mvnw -ntp package -pl ":langstream-runtime-base-docker-image" -Pdocker -DskipTests -PskipPython
          ./mvnw -ntp package -pl ":langstream-runtime-impl" -Pdocker -DskipTests -PskipPython
          ./mvnw -ntp failsafe:integration-test failsafe:verify -pl ":langstream-runtime-impl" -PskipPython

      - name: 'Test: Api Gateway'
        if: ${{ matrix.name == 'Api Gateway' }}
        run: |
          ./mvnw -ntp verify -pl ":langstream-api-gateway" -Pdocker -PskipPython

      - name: 'Test: Deployer'
        if: ${{ matrix.name == 'Deployer' }}
        run: |
          ./mvnw -ntp verify -f langstream-k8s-deployer -Pdocker -PskipPython

      - name: 'Test: Control plane'
        if: ${{ matrix.name == 'Control plane' }}
        run: |
          ./mvnw -ntp verify -pl langstream-webservice -Pdocker -PskipPython

      - name: 'Test: Other'
        if: ${{ matrix.name == 'Other' }}
        run: |
          #/bin/bash
          ./mvnw -ntp verify -PtestSuiteOthers -PskipPython
      - name: 'Test: Style'
        if: ${{ matrix.name == 'Style' }}
        run: |
          #!/bin/bash
          mvn clean install -DskipTests -PskipPython,generateDoc
          if [[ `git status --porcelain` ]]; then
            echo "Found changes after building, please re-build the CRDs or run ./mvnw spotless:apply and commit the changes. "
            git status
            git diff
            exit 1
          fi
  e2e-tests:
    name: End to End tests
    runs-on: LangStream-4-cores
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Python
            category: python
          - name: Other
            category: other

    steps:
      - name: 'Setup: checkout project'
        uses: actions/checkout@v2
      - name: 'Setup: Java 17'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.x'
      - name: 'Init: cache local Maven repository'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@latest
        with:
          cpus: 4
          memory: 8192
          kubernetes-version: 1.26.3
      - uses: azure/setup-helm@v3
        with:
          version: v3.7.0

      - uses: azure/setup-kubectl@v3

      - name: Build docker
        run: |
          chmod +x mvnw
          uname -m
          ./dev/prepare-minikube-for-e2e-tests.sh

      - name: Run tests
        run: |
          chmod +x mvnw
          ./mvnw -ntp install -pl langstream-e2e-tests -am -DskipTests
          export LANGSTREAM_TESTS_CLI_BIN=$(pwd)/bin/langstream
          ./mvnw -ntp verify -pl langstream-e2e-tests -De2eTests -Dgroups="${{ matrix.category }}" -Dlangstream.tests.recycleenv=true

      - name: Upload Surefire reports
        uses: actions/upload-artifact@v3
        if: failure()
        continue-on-error: true
        with:
          name: test-logs-e2e
          path: "**/target/e2e-test-logs/*"
          retention-days: 7

  cli-e2e-tests:
    name: CLI End to End tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: 'Setup: checkout project'
        uses: actions/checkout@v2
      - name: 'Setup: Java 17'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.x'
      - name: Run tests
        run: |
          set -e
          ./docker/build.sh runtime-base-docker-image && ./docker/build.sh runtime && ./docker/build.sh runtime-tester 
          ./mvnw -ntp install -pl langstream-e2e-tests -DskipTests -Dspotless.skip -Dlicense.skip
          export LANGSTREAM_TESTS_CLI_BIN=$(pwd)/bin/langstream
          ./mvnw -ntp verify -pl langstream-e2e-tests -De2eTests -Dgroups="cli"
