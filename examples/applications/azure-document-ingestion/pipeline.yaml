#
# Copyright DataStax, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

assets:
  - name: "langstream-keyspace"
    asset-type: "astra-keyspace"
    creation-mode: create-if-not-exists
    config:
      keyspace: "${secrets.astra.keyspace}"
      datasource: "AstraDatasource"
  - name: "langstream-docs-table"
    asset-type: "cassandra-table"
    creation-mode: create-if-not-exists
    config:
      table-name: "${secrets.astra.table}"
      keyspace: "${secrets.astra.keyspace}"
      datasource: "AstraDatasource"
      create-statements:
        - |
          CREATE TABLE IF NOT EXISTS "${secrets.astra.keyspace}"."${secrets.astra.table}" (
          filename TEXT,
          chunk_text_length TEXT,
          chunk_num_tokens TEXT,
          chunk_id TEXT,
          contents TEXT,
          name TEXT,
          embeddings_vector VECTOR<FLOAT, 1536>,
          PRIMARY KEY (filename, chunk_id));
        - |
          CREATE CUSTOM INDEX IF NOT EXISTS ${secrets.astra.table}_ann_index ON ${secrets.astra.keyspace}.${secrets.astra.table}(embeddings_vector) USING 'StorageAttachedIndex';
name: "Embeddings processor"
pipeline:
  - name: "Azure blob source"
    type: "azure-blob-storage-source"
    configuration:
      container: "${secrets.azure.container}"
      endpoint: "https://${secrets.azure.storage-account-name}.blob.core.windows.net/${secrets.azure.container}"
      storage-account-name: "${secrets.azure.storage-account-name}"
      storage-account-key: "${secrets.azure.storage-access-key}"
  - name: "Extract text"
    type: "text-extractor"
  - name: "Normalise text"
    type: "text-normaliser"
    configuration:
      make-lowercase: true
      trim-spaces: true
  - name: "Split into chunks"
    type: "text-splitter"
    configuration:
      splitter_type: "RecursiveCharacterTextSplitter"
      chunk_size: 4000
      separators: [ "\n\n", "\n", " ", "" ]
      keep_separator: false
      chunk_overlap: 2000
      length_function: "cl100k_base"
  - name: "Convert to structured data"
    type: "document-to-json"
    configuration:
      text-field: text
      copy-properties: true
  - name: "prepare-structure"
    type: "compute"
    configuration:
      fields:
        - name: "value.filename"
          expression: "properties.url"
          type: STRING
        - name: "value.chunk_id"
          expression: "properties.chunk_id"
          type: STRING
        - name: "value.chunk_num_tokens"
          expression: "properties.chunk_num_tokens"
          type: STRING
  - name: "Write to Astra"
    type: "vector-db-sink"
    configuration:
      datasource: "AstraDatasource"
      table-name: "${secrets.astra.table}"
      keyspace: "${secrets.astra.keyspace}"
      mapping: "filename=value.name,chunk_text_length=value.chunk_text_length, chunk_num_tokens=value.chunk_num_tokens, chunk_id=value.chunk_id, contents=value.text, name=value.name"